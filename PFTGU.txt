chapter 2 computer architecture
Von Neumann architecture,
two main parts, CPU and memory

computer use registers to hold things for current computation
computer use memory to store data and instructions

fetch-execute cycle

CPU contains, program counter, instruction decoder, general-purpose registers, arithmetic and logic unit

data accessing methods
immediate addressing, direct addressing, indexed addressing, indirect addressing, base pointer addressing, which is similar to indirect addressing

chapter 3 your first pragrams
%eax holds the system call number
%ebx holds the return status

_start is a symbol, that is the only one forced
symbols are used to mark or look up numeric memory address of every piece of code or data.

.globl linker will use this to look up the entry of program, and it's unnecessary to declare other symbols or labels as .globl

general-purpse registers,
%eax, %ebx, %ecx, %edx, %esi, %edi

speicial-purpse registers,
%eip, %ebp, %esp, %eflags

%eip and %eflags can only be accessed by special instructions

.byte 1-byte
.int 2-byte
.long 4-byte
.ascii "hello world"

memory address reference like this,
address_or_offset(base_or_offset, index, mutiplier)

address_or_offset and mutiplier both are constants, base_or_offset and index both are registers

addressing mode,
immediate addressing mode: movl $3, %eax
direct addressing mode: movl address, %eax
indexed addressing mode: movl address(,%edi,4), %eax
indirect addressing mode: movl (%edi), %eax
base pointer addressing mode: movl 4(%edi), %eax

every mode can be used as either source or destination operand, except
immediate mode can only be a source operand

chapter 4 all about functions
function is a symbol that represent the memory address where function code starts
use functions to break program apart into seperate pieces

call instructions does two things,
push return address(%eip) onto the stack, and move instruction pointer (%eip) to the start of function address

before a function call,
pushl para_N
...
pushl para_2
pushl para_1

call a function, #new frame start from here
push %eip
movl ADDRESS(function), %eip

step into a function,
pushl %ebp
movl %esp, %ebp
subl $4, %esp	#store local variable

before a function return,
movl %ebp, %esp
popl %ebp

function return,
ret

return to calling code,
addl $(4 * N), %esp

save all necessary registers before call a function according to system V ABI

.globl symbol means not-static type definition

.type directive to difine a function, like
.type a_function, @function

chapter 5 dealing with file

unix file, the simplest and most universal way,
1.open a file
%eax holds open system call 5
%ebx holds the address of file
%ecx holds read/write intentions
%edx holds permission set
2.return %eax 
%eax holds file descriptor
3.operate on a file
%ebx holds file descriptor
%ecx holds the address to read 3 or write 4
%edx holds size of buffer
%eax holds error code or number of bytes read from or write out
4.close a file
%eax holds system call close 6
%ebx holds file descriptor

a buffer is a continuous block of bytes used for bulk data transfer

to create a buffer, you need to reserve either static or dynamic storage

static storage will be allocated in the .data section

drawbacks of static storage
1. tedious to type when bulk data
2. take up space in the executable

.section .bss
.lcomm my_buffer, 500

$ dollar sign before symbol use immediate addressing mode, like & in c,
$my_buffer --- &value

at least 3 open file descriptor in linux,
stdin read-only
stdout write-only
stderr write-only

.equ directive to declare constant varables, like
.equ STDIN, 0

a pragram with several arguments, after move %esp to %ebp,
8(%ebp)	-> ADDRESS(argv[1])
4(%ebp)	-> ADDRESS(argv[0])
%ebp 	-> argc

chapter 6 reading and writing sample record

.include directive to include constants file, like
.include "defs.s"

chapter 7 devloping robust program

chapter 8 sharing functions with code libraries

ld -dynamic-linker /lib/ld-linux.so -lc myprog.o -o myprog 

chapter 9 intermediate memory topics

stack start at the address 0xbf ff ff ff

the process of asigning virtual addresses to physicial addresses is call mapping




