 第一章

C语言的设计目的，小而快。
 应用场景：速度，空间，可移植性。 

 gcc [-E | -S | -c | -o]

 E编译预处理 S汇编 c编译 o输出文件

 所有的C程序在“函数”中运行，main函数是程序的起点。

 main的返回值类型为int，计算机靠返回值类型判断程序是否运行成功，0表示成功，非0表示有问题。

 检查程序的退出状态 : echo $?

 printf()格式输出函数，%格式字符

 C语言是编译型语言，用编译器将人类可读的源代码转换为机器可读的机器码。

 C语言是一直更低级的语言，C不直接支持字符串，而是通过一个单个字符的数组提供类似的功能。
 s = "hello" 等于 s = {'h','e','l','l','o','\0'}

 数组索引从0计数，是由于索引标识到第一个元素的“偏移量”。

 布尔运算符，&&, ||, !求值结果为0或1
 位预算符，&和|

 避免使用多个if语句，可选用switch语句，switch顺序执行直到break
 switch应用情形，多次检查同一单值，可共用代码段

使用break跳出循环体或switch语句，使用continue跳过后面的循环体代码，回到循环体开始处

大部分表达式都有返回值，赋值语句也有返回值，比如：y=(x=4);


第二章 内存和指针

指针的优势，避免复制，共享数据

函数中声明的变量储存在堆栈中，main函数外声明的变量储存在全局区

函数参数传递是通过“拷贝值”来完成的

&操作符表示变量的内存地址，*操作符可以读出并设置变量的值

每次当char类型的“数组变量”被使用时，计算机使用字符串中第一个字符的地址去替换，实际上，“数字变量”像一个指针，char a="cookie"

数组元素指向第一个元素的地址，函数的参数被声明为数组，它会被作为“指针”来对待

sizeof()为操作符，它会被编译器编译为一串指令序列，函数调用会跳转到到单独的代码段

使用&操作符可以取得指针的地址，&p

sizeof(数组)就是数组的大小

数组的地址等于数组，&array == array, &pointer != pointer

“指针变量”本身占据内存，而“数组变量”不占据内存

指针变量和数组变量有少许不同，当把数组变量赋值给指针变量时，数组大小的信息丢失了

可以使用[]或*读出或设置数组变量的值，array[1] == *(array+1) == *(1+array) ==1[array]

指针变量拥有类型，可以进行算术运算，int * p; p++;


